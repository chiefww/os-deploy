
#Использовать asserts
#Использовать ".."

Перем мКонфиг;

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	МассивТестов = Новый Массив;
	
	МассивТестов.Добавить("ТестДолжен_ПрочитатьКонфигурацию");
	
	МассивТестов.Добавить("ТестДолжен_ПроверитьФайловуюБазуСПользователем");
	МассивТестов.Добавить("ТестДолжен_ПроверитьФайловуюБазуБезПользователя");
	МассивТестов.Добавить("ТестДолжен_ПроверитьСервернуюБазу");
	МассивТестов.Добавить("ТестДолжен_ПроверитьСервернуюБазуСОтдельнымиПараметрыамиSQL");
	МассивТестов.Добавить("ТестДолжен_ПроверитьБазуПодключеннуюКХранилищу");
	МассивТестов.Добавить("ТестДолжен_ПроверитьНесуществующуюБазу");
	
	МассивТестов.Добавить("ТестДолжен_ПроверитьПочтуПоУмолчанию");
	МассивТестов.Добавить("ТестДолжен_ПроверитьПочтуSSL");
	МассивТестов.Добавить("ТестДолжен_ПроверитьПочтуБезSSL");
	МассивТестов.Добавить("ТестДолжен_ПроверитьНесуществующуюПочту");
	
	МассивТестов.Добавить("ТестДолжен_ПроверитьСоединениеFTP");
	МассивТестов.Добавить("ТестДолжен_ПроверитьНесуществующееСоединениеFTP");
	
	МассивТестов.Добавить("ТестДолжен_ПроверитьПараметры");
	
	МассивТестов.Добавить("ТестДолжен_ПроверитьЗамерВремени");
	МассивТестов.Добавить("ТестДолжен_ПроверитьФорматированиеЗамераВремени");
	
	Возврат МассивТестов;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	
	
КонецПроцедуры

Процедура ТестДолжен_ПрочитатьКонфигурацию() Экспорт
	
	мКонфиг = Новый КонфигурацияПриложения(ОбъединитьПути(ТекущийСценарий().Каталог, "config.json"));
	
	Ожидаем
		.Что(мКонфиг).ИмеетТип("КонфигурацияПриложения");
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьФайловуюБазуСПользователем() Экспорт
	
	База = мКонфиг.ПолучитьБазу("base1");
	
	Ожидаем
		.Что(База).ИмеетТип("ОписаниеБазы")
		.Что(База.СтрокаПодключения).Равно("File='C:\base1'")
		.Что(База.Пользователь).Равно("Администратор")
		.Что(База.Пароль).Равно("123")
		.Что(База.ВерсияПлатформы).Равно("8.3")
		.Что(База.ЭтоФайловаяБаза()).ЕстьИстина()
		.Что(База.ПолучитьПутьКБазе()).Равно("C:\base1")
		.Что(База.ПолучитьИмяСервера()).ЕстьНеопределено()
		.Что(База.ПолучитьИмяБазы()).ЕстьНеопределено()
		.Что(База.ИмяСервераSQL).ЕстьНеопределено()
		.Что(База.ИмяБазыSQL).ЕстьНеопределено();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьФайловуюБазуБезПользователя() Экспорт
	
	База = мКонфиг.ПолучитьБазу("base2");
	
	Ожидаем
		.Что(База).ИмеетТип("ОписаниеБазы")
		.Что(База.СтрокаПодключения).Равно("File='C:\base2'")
		.Что(База.Пользователь).ЕстьНеопределено()
		.Что(База.Пароль).ЕстьНеопределено()
		.Что(База.ВерсияПлатформы).Равно("8.3")
		.Что(База.ЭтоФайловаяБаза()).ЕстьИстина()
		.Что(База.ПолучитьПутьКБазе()).Равно("C:\base2")
		.Что(База.ПолучитьИмяСервера()).ЕстьНеопределено()
		.Что(База.ПолучитьИмяБазы()).ЕстьНеопределено()
		.Что(База.ИмяСервераSQL).ЕстьНеопределено()
		.Что(База.ИмяБазыSQL).ЕстьНеопределено();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСервернуюБазу() Экспорт
	
	База = мКонфиг.ПолучитьБазу("base3");
	
	Ожидаем
		.Что(База).ИмеетТип("ОписаниеБазы")
		.Что(База.СтрокаПодключения).Равно("Srvr='srvr';Ref='base3'")
		.Что(База.Пользователь).Равно("Администратор")
		.Что(База.Пароль).Равно("123")
		.Что(База.ВерсияПлатформы).Равно("8.3.10")
		.Что(База.ЭтоФайловаяБаза()).ЕстьЛожь()
		.Что(База.ПолучитьПутьКБазе()).ЕстьНеопределено()
		.Что(База.ПолучитьИмяСервера()).Равно("srvr")
		.Что(База.ПолучитьИмяБазы()).Равно("base3")
		.Что(База.ИмяСервераSQL).Равно("srvr")
		.Что(База.ИмяБазыSQL).Равно("base3");
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСервернуюБазуСОтдельнымиПараметрыамиSQL() Экспорт
	
	База = мКонфиг.ПолучитьБазу("basesql");
	
	Ожидаем
		.Что(База).ИмеетТип("ОписаниеБазы")
		.Что(База.СтрокаПодключения).Равно("Srvr='srvr';Ref='basesql'")
		.Что(База.Пользователь).Равно("Администратор")
		.Что(База.Пароль).Равно("123")
		.Что(База.ВерсияПлатформы).Равно("8.3")
		.Что(База.ЭтоФайловаяБаза()).ЕстьЛожь()
		.Что(База.ПолучитьПутьКБазе()).ЕстьНеопределено()
		.Что(База.ПолучитьИмяСервера()).Равно("srvr")
		.Что(База.ПолучитьИмяБазы()).Равно("basesql")
		.Что(База.ИмяСервераSQL).Равно("sqlsrvr")
		.Что(База.ИмяБазыSQL).Равно("basesql1");
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьБазуПодключеннуюКХранилищу() Экспорт
	
	База = мКонфиг.ПолучитьБазу("baserepo");
	
	Ожидаем
		.Что(База).ИмеетТип("ОписаниеБазы")
		.Что(База.СтрокаПодключения).Равно("Srvr=srvr;Ref=baserepo")
		.Что(База.Пользователь).Равно("Администратор")
		.Что(База.Пароль).Равно("123")
		.Что(База.ПользовательХранилища).Равно("admin")
		.Что(База.ПарольХранилища).Равно("1234")
		.Что(База.ВерсияПлатформы).Равно("8.3")
		.Что(База.ЭтоФайловаяБаза()).ЕстьЛожь()
		.Что(База.ПолучитьПутьКБазе()).ЕстьНеопределено();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНесуществующуюБазу() Экспорт
	
	База = мКонфиг.ПолучитьБазу("base4");
	
	Ожидаем
		.Что(База).ЕстьНеопределено();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПочтуПоУмолчанию() Экспорт
	
	ОписаниеПочты = мКонфиг.ПолучитьАдресПочты("mail-default");
	
	Ожидаем
		.Что(ОписаниеПочты).ИмеетТип("ОписаниеУчетнойЗаписиПочты")
		.Что(ОписаниеПочты.Идентификатор).Равно("mail-default")
		.Что(ОписаниеПочты.АдресSMTP).Равно("smtp.domain.com")
		.Что(ОписаниеПочты.ПортSMTP).Равно(465)
		.Что(ОписаниеПочты.ПользовательSMTP).Равно("user")
		.Что(ОписаниеПочты.ПарольSMTP).Равно("123")
		.Что(ОписаниеПочты.ИспользоватьSSL).ЕстьИстина();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПочтуSSL() Экспорт
	
	ОписаниеПочты = мКонфиг.ПолучитьАдресПочты("mail-ssl");
	
	Ожидаем
		.Что(ОписаниеПочты).ИмеетТип("ОписаниеУчетнойЗаписиПочты")
		.Что(ОписаниеПочты.Идентификатор).Равно("mail-ssl")
		.Что(ОписаниеПочты.АдресSMTP).Равно("smtp.domain.com")
		.Что(ОписаниеПочты.ПортSMTP).Равно(465)
		.Что(ОписаниеПочты.ПользовательSMTP).Равно("user")
		.Что(ОписаниеПочты.ПарольSMTP).Равно("123")
		.Что(ОписаниеПочты.ИспользоватьSSL).ЕстьИстина();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПочтуБезSSL() Экспорт
	
	ОписаниеПочты = мКонфиг.ПолучитьАдресПочты("mail-nossl");
	
	Ожидаем
		.Что(ОписаниеПочты).ИмеетТип("ОписаниеУчетнойЗаписиПочты")
		.Что(ОписаниеПочты.Идентификатор).Равно("mail-nossl")
		.Что(ОписаниеПочты.АдресSMTP).Равно("smtp.domain.com")
		.Что(ОписаниеПочты.ПортSMTP).Равно(465)
		.Что(ОписаниеПочты.ПользовательSMTP).Равно("user")
		.Что(ОписаниеПочты.ПарольSMTP).Равно("123")
		.Что(ОписаниеПочты.ИспользоватьSSL).ЕстьЛожь();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНесуществующуюПочту() Экспорт
	
	ОписаниеПочты = мКонфиг.ПолучитьАдресПочты("mail-undefined");
	
	Ожидаем.Что(ОписаниеПочты).ЕстьНеопределено();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСоединениеFTP() Экспорт
	
	ОписаниеFTP = мКонфиг.ПолучитьFTP("ftp");
	
	Ожидаем
		.Что(ОписаниеFTP).ИмеетТип("ОписаниеFTPСоединения")
		.Что(ОписаниеFTP.АдресСервера).Равно("ftp.domain.com")
		.Что(ОписаниеFTP.Порт).Равно(21)
		.Что(ОписаниеFTP.ИмяПользователя).Равно("user")
		.Что(ОписаниеFTP.Пароль).Равно("1231");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНесуществующееСоединениеFTP() Экспорт
	
	ОписаниеFTP = мКонфиг.ПолучитьFTP("ftp1");
	
	Ожидаем.Что(ОписаниеFTP).ЕстьНеопределено();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПараметры() Экспорт
	
	Параметр1 = мКонфиг.ПолучитьПараметр("p1");
	Параметр2 = мКонфиг.ПолучитьПараметр("p2");
	Параметр3 = мКонфиг.ПолучитьПараметр("p3");
	Параметр4 = мКонфиг.ПолучитьПараметр("p4");
	Параметр5 = мКонфиг.ПолучитьПараметр("p5");
	
	Ожидаем
		.Что(Параметр1).Равно("param1")
		.Что(Параметр2).ЕстьИстина()
		.Что(Параметр3).ЕстьЛожь()
		.Что(Параметр4).Равно(10)
		.Что(Параметр5).ЕстьНеопределено();
		
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗамерВремени() Экспорт
	
	ЗамерВремени.НачатьЗамер(Дата(2018, 01, 01, 12, 0, 0));
	ЗамерВремени.ЗакончитьЗамер(Дата(2018, 01, 01, 12, 0, 59));
	
	Ожидаем.Что(ЗамерВремени.ПолучитьРезультат()).Равно(59);
	
	ЗамерВремени.НачатьЗамер(Дата(2018, 01, 01, 12, 0, 0));
	ЗамерВремени.ЗакончитьЗамер(Дата(2018, 01, 01, 12, 1, 0));
	
	Ожидаем.Что(ЗамерВремени.ПолучитьРезультат()).Равно(60);
	
	ЗамерВремени.НачатьЗамер(Дата(2018, 01, 01, 12, 0, 1));
	ЗамерВремени.ЗакончитьЗамер(Дата(2018, 01, 02, 12, 0, 2));
	
	Ожидаем.Что(ЗамерВремени.ПолучитьРезультат()).Равно(86401);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьФорматированиеЗамераВремени() Экспорт
	
	Минута = 60;
	Час = Минута * 60;
	День = Час * 24;
	
	Ожидаем
		.Что(ЗамерВремени.ФорматироватьРезультат(59)).Равно("59с.")
		.Что(ЗамерВремени.ФорматироватьРезультат(Минута * 2 + 3)).Равно("2м., 3с.")
		.Что(ЗамерВремени.ФорматироватьРезультат(Час * 2 + Минута * 4 + 15)).Равно("2ч., 4м., 15с.")
		.Что(ЗамерВремени.ФорматироватьРезультат(День * 2 + Час * 13 + 45)).Равно("2д., 13ч., 0м., 45с.");
	
КонецПроцедуры
