
//** @name ВыполнениеДействий
//** @desc Основной модуль библиотеки, содержащий возможные действия

Перем Счетчик;
Перем НачальныйНомер;
Перем КонечныйНомер;
Перем ПропускатьВсе;

Перем ЗамерВремениДействия;
Перем ЗамерВремениОбщий;

//* @desc Выгружает ИБ в файл.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяФайла {Строка} Имя файла выгрузки.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ВыгрузитьИБ(ОписаниеБазы, ИмяФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Выгрузка ИБ %2 в файл", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла выгрузки: %1", ИмяФайла);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ВыгрузитьИнформационнуюБазу(ИмяФайла);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Загружает ИБ из файла.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяФайла {Строка} Имя файла выгрузки.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ЗагрузитьИБ(ОписаниеБазы, ИмяФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Загрузка ИБ %2 из файла", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла выгрузки: %1", ИмяФайла);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ЗагрузитьИнформационнуюБазу(ИмяФайла);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Выгружает конфигурацию в файл.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяФайла {Строка} Имя файла конфигурации.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ВыгрузитьКонфигурацию(ОписаниеБазы, ИмяФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Сохранение конфигурации базы %2 в файл", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла конфигурации: %1", ИмяФайла);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ВыгрузитьКонфигурациюВФайл(ИмяФайла);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Загружает конфигурацию из файла и обновляет конфигурацию БД.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяФайла {Строка} Имя файла конфигурации.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ЗагрузитьКонфигурацию(ОписаниеБазы, ИмяФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Загрузка конфигурации базы %2 из файла", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла конфигурации: %1", ИмяФайла);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ИмяФайла, Истина);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Обновляет конфигурацию БД.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ОбновитьКонфигурациюБД(ОписаниеБазы, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Обновление конфигурации БД базы %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ОбновитьКонфигурациюБазыДанных();
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Обновляет конфигурацию из файла поставки или каталога дистрибутива.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяМассивФайлов {Строка, Массив} Указывается либо полное имя файла поставки,
//*     либо каталог, в котором содержится файл поставки (1Cv8.cf, 1Cv8.cfu).
//*     В случае указания массива будет произведено последовательное обновление
//*     из каждого файла или каталога в массиве.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ОбновитьКонфигурацию(ОписаниеБазы, ИмяМассивФайлов, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Обновление конфигурации базы %2 из файла/ов", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИмяМассивФайлов) = Тип("Массив") Тогда
		МассивФайлов = ИмяМассивФайлов;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ИмяМассивФайлов);
	КонецЕсли;
	
	Если МассивФайлов.Количество() = 0 Тогда
		ВыводЛога.Информация("Нет файлов обновления - пропуск" + Символы.ПС);
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		Файл = Новый Файл(ИмяФайла);
		
		Если Файл.ЭтоКаталог() Тогда
			ВыводЛога.Сообщение("Каталог обновления: %1", ИмяФайла);
		Иначе
			ВыводЛога.Сообщение("Имя файла обновления: %1", ИмяФайла);
		КонецЕсли;
		
		Попытка
			Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
			
			Если Файл.ЭтоКаталог() Тогда
				Конфигуратор.ОбновитьКонфигурацию(ИмяФайла);
			Иначе
				Конфигуратор.ОбновитьКонфигурациюИзФайла(ИмяФайла);
			КонецЕсли;
			
			ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		Исключение
			Отказ = Истина;
			ВыводЛога.Ошибка(ОписаниеОшибки());
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Если Не Отказ Тогда
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	КонецЕсли;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Создает хранилище конфигурации.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ПутьХранилища {Строка} Путь к каталогу хранилища.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура СоздатьХранилище(ОписаниеБазы, ПутьХранилища, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Создание хранилища для %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Путь к хранилищу: %1", ПутьХранилища);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.СоздатьФайловоеХранилищеКонфигурации(ПутьХранилища, ОписаниеБазы.ПользовательХранилища, ОписаниеБазы.ПарольХранилища);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Подключает ИБ к хранилищу.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ПутьХранилища {Строка} Путь к каталогу хранилища.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ПодключитьИБКХранилищу(ОписаниеБазы, ПутьХранилища, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Подключение базы %2 к хранилищу", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Путь к хранилищу: %1", ПутьХранилища);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ПодключитьсяКХранилищу(ПутьХранилища, ОписаниеБазы.ПользовательХранилища, ОписаниеБазы.ПарольХранилища, Истина);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Отключает ИБ от хранилища.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ОтключитьИБОтХранилища(ОписаниеБазы, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Отключение базы %2 от хранилища", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ОтключитьсяОтХранилища();
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Обновляет ИБ из хранилища.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ПутьХранилища {Строка} Путь к каталогу хранилища.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ОбновитьИБИзХранилища(ОписаниеБазы, ПутьХранилища, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Обновление базы %2 из хранилища", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Путь к хранилищу: %1", ПутьХранилища);
	
	Попытка
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(ПутьХранилища, ОписаниеБазы.ПользовательХранилища, ОписаниеБазы.ПарольХранилища);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Запускает базу в режиме предприятия. Возможен запуск с произвольным параметром.
//*     Возможен запуск с открытием внешней обработки.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ПараметрЗапуска {Строка} Произвольный параметр запуска (/C) (необязательный).
//* @param ЗапуститьОбработку {Строка} Путь к внешней обработке (необязательный).
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ЗапуститьВРежимеПредприятия(ОписаниеБазы, ПараметрЗапуска = Неопределено, ЗапуститьОбработку = Неопределено, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Запуск базы %2 в режиме предприятия", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		ВыводЛога.Информация("Параметр запуска %1", ПараметрЗапуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапуститьОбработку) Тогда
		ВыводЛога.Информация("Запуск обработки %1", ЗапуститьОбработку);
	КонецЕсли;
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДопКлючи = Неопределено;
		
		Если ЗначениеЗаполнено(ЗапуститьОбработку) Тогда
			ДопКлючи = СтрШаблон("/Execute ""%1""", ЗапуститьОбработку);
		КонецЕсли;
		
		Конфигуратор = ОписаниеБазы.ПолучитьКонфигуратор();
		Конфигуратор.ЗапуститьВРежимеПредприятия(ПараметрЗапуска, , ДопКлючи);
		ВыводЛога.Сообщение(Конфигуратор.ВыводКоманды());
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Запускает внешнюю обработку, содержащую произвольные действия с базой
//*     (см. src/templates/ДействияСБазойШаблон.epf). Используется COM-соединение.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ПутьКОбработке {Строка} Путь к внешней обработке.
//* @param ИмяСценария {Строка} Имя сценария, заданного в обработке.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ВыполнитьСценарийДействийСБазой(ОписаниеБазы, ПутьКОбработке, ИмяСценария, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Выполнение сценария %2 в базе %3", Счетчик, ИмяСценария, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла обработки: %1", ПутьКОбработке);
	
	Попытка
		Соединение = ОписаниеБазы.ПолучитьCOMСоединение();
		Обработка = ОписаниеБазы.ПолучитьОбъектОбработкиДействий(Соединение, ПутьКОбработке);
		Результат = Обработка.ВыполнитьДействия(ИмяСценария);
		ВыводЛога.Сообщение(Результат.Вывод);
		
		Если Результат.Отказ Тогда
			ВыводЛога.Ошибка(Результат.ТекстОшибки + Символы.ПС);
		Иначе
			ВыводЛога.Успех("Успешно" + Символы.ПС);
		КонецЕсли;
		
		Отказ = Результат.Отказ;
		
		ОсвободитьОбъект(Обработка);
		ОсвободитьОбъект(Соединение);
		ВыполнитьСборкуМусора();
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Устанавливает блокировку соединений с базой (см. src/БлокировкаСеансов.epf).
//*     После этого действия вход в базу возможен только с ключом /uc. Используется COM-соединение.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура УстановитьБлокировкуСоединений(ОписаниеБазы, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Установка блокировки соединений с базой %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение = ОписаниеБазы.ПолучитьCOMСоединение();
		Обработка = ОписаниеБазы.ПолучитьОбъектОбработкиБлокировки(Соединение);
		Обработка.УстановитьБлокировку(ОписаниеБазы.КлючРазрешения);
		ВыводЛога.Успех("Успешно" + Символы.ПС);
		
		ОсвободитьОбъект(Обработка);
		ОсвободитьОбъект(Соединение);
		ВыполнитьСборкуМусора();
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Снимает блокировку соединений с базой (см. src/БлокировкаСеансов.epf).
//*     Используется COM-соединение.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура СнятьБлокировкуСоединений(ОписаниеБазы, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Снятие блокировки соединений с базой %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение = ОписаниеБазы.ПолучитьCOMСоединение();
		Обработка = ОписаниеБазы.ПолучитьОбъектОбработкиБлокировки(Соединение);
		Обработка.СнятьБлокировку();
		ВыводЛога.Успех("Успешно" + Символы.ПС);
		
		ОсвободитьОбъект(Обработка);
		ОсвободитьОбъект(Соединение);
		ВыполнитьСборкуМусора();
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Удаляет существующие сеансы в клиент-серверной базе. Используется COM-соединение.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяАдминистратора {Строка} Имя администратора кластера (необязательный).
//* @param Пароль {Строка} Пароль администратора кластера (необязательный).
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ОтключитьСеансы(ОписаниеБазы, ИмяАдминистратора = Неопределено, Пароль = Неопределено, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Отключение сеансов базы %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеБазы.ЭтоФайловаяБаза() Тогда
		ВыводЛога.Информация("Это файловая база - пропуск");
	Иначе
		Попытка
			РаботаССервернымиБазами.ОтключитьСеансы(ОписаниеБазы, ИмяАдминистратора, Пароль);
			ВыводЛога.Успех("Успешно" + Символы.ПС);
		Исключение
			Отказ = Истина;
			ВыводЛога.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Устанавливает признак блокировки регламентных заданий в клиент-серверной базе.
//*     Используется COM-соединение.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяАдминистратора {Строка} Имя администратора кластера (необязательный).
//* @param Пароль {Строка} Пароль администратора кластера (необязательный).
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура УстановитьБлокировкуРегламентныхЗаданий(ОписаниеБазы, ИмяАдминистратора = Неопределено, Пароль = Неопределено, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Блокировка регламентных заданий в базе %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеБазы.ЭтоФайловаяБаза() Тогда
		ВыводЛога.Информация("Это файловая база - пропуск");
	Иначе
		Попытка
			РаботаССервернымиБазами.УстановитьБлокировкуРегламентныхЗаданий(ОписаниеБазы, Истина, ИмяАдминистратора, Пароль);
			ВыводЛога.Успех("Успешно" + Символы.ПС);
		Исключение
			Отказ = Истина;
			ВыводЛога.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Снимает признак блокировки регламентных заданий в клиент-серверной базе.
//*     Используется COM-соединение.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяАдминистратора {Строка} Имя администратора кластера (необязательный).
//* @param Пароль {Строка} Пароль администратора кластера (необязательный).
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура СнятьБлокировкуРегламентныхЗаданий(ОписаниеБазы, ИмяАдминистратора = Неопределено, Пароль = Неопределено, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Снятие блокировки регламентных заданий в базе %2", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеБазы.ЭтоФайловаяБаза() Тогда
		ВыводЛога.Информация("Это файловая база - пропуск");
	Иначе
		Попытка
			РаботаССервернымиБазами.УстановитьБлокировкуРегламентныхЗаданий(ОписаниеБазы, Ложь, ИмяАдминистратора, Пароль);
			ВыводЛога.Успех("Успешно" + Символы.ПС);
		Исключение
			Отказ = Истина;
			ВыводЛога.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Создает бэкап базы средствами MSSQL.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ИмяПользователя {Строка} Имя учетной записи MSSQL.
//* @param Пароль {Строка} Пароль учетной записи MSSQL.
//* @param ИмяФайла {Строка} Имя файла бэкапа.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура СоздатьSQLБэкап(ОписаниеБазы, ИмяПользователя, Пароль, ИмяФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Бэкап базы %2 средствами SQL", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если ОписаниеБазы.ЭтоФайловаяБаза() Тогда
		ВыводЛога.Информация("Это файловая база - пропуск");
	Иначе
		Попытка
			РаботаСSQL.СоздатьБэкап(ОписаниеБазы, ИмяПользователя, Пароль, ИмяФайла);
			ВыводЛога.Успех("Успешно" + Символы.ПС);
		Исключение
			Отказ = Истина;
			ВыводЛога.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Загружает бэкап базы средствами MSSQL.
//* @param ОписаниеБазы {ОписаниеБазы} Объект описания базы.
//* @param ОписаниеБазыИсточника {ОписаниеБазы} В случае, когда бэкап загружается в другую базу, нужно указать базу-источник (необязательный).
//* @param ИмяПользователя {Строка} Имя учетной записи MSSQL.
//* @param Пароль {Строка} Пароль учетной записи MSSQL.
//* @param ИмяФайла {Строка} Имя файла бэкапа.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ЗагрузитьSQLБэкап(ОписаниеБазы, ОписаниеБазыИсточника = Неопределено, ИмяПользователя, Пароль, ИмяФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Загрузка бэкапа в базу %2 средствами SQL", Счетчик, ОписаниеБазы.Идентификатор);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеБазы.ЭтоФайловаяБаза() Тогда
		ВыводЛога.Информация("Это файловая база - пропуск");
	Иначе
		ВыводЛога.Сообщение("Файл бэкапа: %1", ИмяФайла);
		
		Попытка
			РаботаСSQL.ЗагрузитьБэкап(ОписаниеБазы, ОписаниеБазыИсточника, ИмяПользователя, Пароль, ИмяФайла);
			ВыводЛога.Успех("Успешно" + Символы.ПС);
		Исключение
			Отказ = Истина;
			ВыводЛога.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Загружает файл на ftp-сервер.
//* @param ОписаниеFTP {ОписаниеFTPСоединения} Объект описания учетной записи ftp.
//* @param ИмяФайлаНаСервере {Строка} Имя файла на ftp-сервере.
//* @param ИмяФайлаИсточника {Строка} Имя файла на локальном компьютере.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ЗаписатьФайлFTP(ОписаниеFTP, ИмяФайлаНаСервере, ИмяФайлаИсточника, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Загрузка файла на ftp сервер %2", Счетчик, ОписаниеFTP.АдресСервера);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла: %1", ИмяФайлаИсточника);
	
	Попытка
		Соединение = ОписаниеFTP.ПолучитьСоединение();
		Соединение.Записать(ИмяФайлаИсточника, ИмяФайлаНаСервере);
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Скачивает файл с ftp-сервера.
//* @param ОписаниеFTP {ОписаниеFTPСоединения} Объект описания учетной записи ftp.
//* @param ИмяФайлаНаСервере {Строка} Имя файла на ftp-сервере.
//* @param ИмяФайлаПриемника {Строка} Имя файла на локальном компьютере.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ПолучитьФайлFTP(ОписаниеFTP, ИмяФайлаНаСервере, ИмяФайлаПриемника, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Получение файла с ftp сервера %2", Счетчик, ОписаниеFTP.АдресСервера);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла: %1", ИмяФайлаНаСервере);
	
	Попытка
		Соединение = ОписаниеFTP.ПолучитьСоединение();
		Соединение.Получить(ИмяФайлаНаСервере, ИмяФайлаПриемника);
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Удаляет файл с ftp-сервера.
//* @param ОписаниеFTP {ОписаниеFTPСоединения} Объект описания учетной записи ftp.
//* @param ИмяФайлаНаСервере {Строка} Имя файла на ftp-сервере.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура УдалитьФайлFTP(ОписаниеFTP, ИмяФайлаНаСервере, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Удаление файла с ftp сервера %2", Счетчик, ОписаниеFTP.АдресСервера);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя файла: %1", ИмяФайлаНаСервере);
	
	Попытка
		Соединение = ОписаниеFTP.ПолучитьСоединение();
		Соединение.Удалить(ИмяФайлаНаСервере);
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Очищает каталог на ftp-сервере.
//* @param ОписаниеFTP {ОписаниеFTPСоединения} Объект описания учетной записи ftp.
//* @param ИмяКаталога {Строка} Имя каталога на ftp-сервере.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура ОчиститьКаталогFTP(ОписаниеFTP, ИмяКаталога, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация("%1. Очистка каталога на ftp сервере %2", Счетчик, ОписаниеFTP.АдресСервера);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Сообщение("Имя каталога: %1", ИмяКаталога);
	
	Попытка
		Соединение = ОписаниеFTP.ПолучитьСоединение();
		
		МассивФайлов = Соединение.НайтиФайлы(ИмяКаталога);
		
		Для Каждого Файл Из МассивФайлов Цикл
			Соединение.Удалить(Файл.ПолноеИмя);
		КонецЦикла;
		
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Копирует файл.
//* @param Источник {Строка} Имя файла-источника.
//* @param Получатель {Строка} Имя файла-приемника.
//* @param Отказ {Булево} Признак отказа от продолжения действий.
Процедура КопироватьФайл(Источник, Получатель, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыводЛога.Информация(
		"%1. копирование файла %2
		|    в %3", Счетчик, Источник, Получатель);
	
	Если Не ПередНачаломДействия() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		КопироватьФайл(Источник, Получатель);
		ВыводЛога.Успех("Успешно" + Символы.ПС);
	Исключение
		Отказ = Истина;
		ВыводЛога.Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
	ПослеОкончанияДействия();
	
КонецПроцедуры

//* @desc Событие вызывается перед выполнением всех действий.
//* @param ЗначенияПараметров {Соответствие} Соответствие, полученное парсером аргументов командной строки.
Процедура ПередВыполнением(ЗначенияПараметров) Экспорт
	
	Если ЗначенияПараметров.Получить("-steps") = Истина Тогда
		ПропускатьВсе = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияПараметров.Получить("-start")) Тогда
		НачальныйНомер = Число(ЗначенияПараметров.Получить("-start"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияПараметров.Получить("-end")) Тогда
		КонечныйНомер = Число(ЗначенияПараметров.Получить("-end"));
	КонецЕсли;
	
КонецПроцедуры

//* @desc Событие вызывается перед выполнением очередного действия.
//* @return {Булево} Возвращаемое значение показывает, надо ли выполнять действие.
Функция ПередНачаломДействия()
	
	Результат = Истина;
	
	Если Не ПроверитьВхождениеТекущегоНомера() Тогда
		ВыводЛога.Информация("Пропуск" + Символы.ПС);
		Результат = Ложь;
	Иначе
		ЗамерВремениДействия = Новый ЗамерВремени;
		ЗамерВремениДействия.НачатьЗамер();
		
		Если ЗамерВремениОбщий = Неопределено Тогда
			ЗамерВремениОбщий = Новый ЗамерВремени;
			ЗамерВремениОбщий.НачатьЗамер();
		КонецЕсли;
		
		ВыводЛога.Сообщение("Начало: %1" + Символы.ПС, ТекущаяДата());
	КонецЕсли;
	
	Счетчик = Счетчик + 1;
	
	Возврат Результат;
	
КонецФункции

//* @desc Событие вызывается после выполнения очередного действия.
//* @return {Булево} Возвращаемое значение не используется.
Функция ПослеОкончанияДействия()
	
	ЗамерВремениДействия.ЗакончитьЗамер();
	ЗамерВремениОбщий.ЗакончитьЗамер();
	
	ВыводЛога.Сообщение("Конец: %1", ТекущаяДата());
	ВыводЛога.Сообщение("%1, Всего: %2" + Символы.ПС,
		ЗамерВремениДействия.ПолучитьРезультатСтрокой(),
		ЗамерВремениОбщий.ПолучитьРезультатСтрокой());
	
	Возврат Истина;
	
КонецФункции

//* @desc Проверяет, указан ли шаг, с которого надо начать и которым надо закончить,
//*     определяет, удовлетворяет ли номер текущего действия этим условиям.
//* @return {Булево}
Функция ПроверитьВхождениеТекущегоНомера()
	
	Если ПропускатьВсе Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВхождениеСНачала = Истина;
	ВхождениеСКонца = Истина;
	
	Если ЗначениеЗаполнено(НачальныйНомер) Тогда
		ВхождениеСНачала = (Счетчик >= НачальныйНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонечныйНомер) Тогда
		ВхождениеСКонца = (Счетчик <= КонечныйНомер);
	КонецЕсли;
	
	Возврат ВхождениеСНачала И ВхождениеСКонца;
	
КонецФункции

Счетчик = 1;
ПропускатьВсе = Ложь;
