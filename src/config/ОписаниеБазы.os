
//** @name ОписаниеБазы
//** @desc Класс описания базы данных

#Использовать v8runner

//* @desc Идентификатор базы как он задан в конфигурационном файле.
Перем Идентификатор Экспорт;

//* @desc Строка подключения в виде File='D:\base' или Srvr='server';Ref='base'.
//* Соответствует ключу <b>conn</b>.
Перем СтрокаПодключения Экспорт;

//* @desc Имя пользователя (не указывается, если в базе нет пользователей).
//* Соответствует ключу <b>user</b>, необязательный.
Перем Пользователь Экспорт;

//* @desc Пароль пользователя (не указывается, если не указан пользователь).
//* Соответствует ключу <b>pwd</b>, необязательный.
Перем Пароль Экспорт;

//* @desc Версия платформы в виде 8.3, 8.3.10, 8.3.10.2667. По умолчанию - 8.3.
//* Соответствует ключу <b>version</b>, необязательный.
Перем ВерсияПлатформы Экспорт;

//* @desc Ключ разрешения (параметр /uc), который будет использоваться при блокировке сеансов.
//* Соответствует ключу <b>key</b>, необязательный.
Перем КлючРазрешения Экспорт;

//* @desc Имя COM-коннектора, если он зарегистрирован под другим именем. Может использоваться
//* в случае, когда необходимо иметь несколько зарегистрированных коннекторов разных версий.
//* По умолчанию - V83.COMConnector (или V82.COMConnector, в зависимости от платформы).
//* Соответствует ключу <b>comconnector</b>, необязательный.
Перем ИмяКоннектора Экспорт;

//* @desc Указывается в случае, когда имя сервера СУБД отличается от имени сервера 1с.
//* По умолчанию определяется из строки соединения.
//* Соответствует ключу <b>sql-server</b>, необязательный.
Перем ИмяСервераSQL Экспорт;

//* @desc Указывается в случае, когда имя базы на сервере СУБД отличается от имени базы на сервере 1с.
//* По умолчанию определяется из строки соединения.
//* Соответствует ключу <b>sql-base</b>, необязательный.
Перем ИмяБазыSQL Экспорт;

//* @desc Пользователь хранилища (не указывается, если база не подключена к хранилищу).
//* Соответствует ключу <b>repo-user</b>, необязательный.
Перем ПользовательХранилища Экспорт;

//* @desc Пароль хранилища (не указывается, если база не подключена к хранилищу).
//* Соответствует ключу <b>repo-pwd</b>, необязательный.
Перем ПарольХранилища Экспорт;

Перем Конфигуратор;

//* @desc Конструктор.
//* @param ИД {Строка} Идентификатор базы как он задан в конфигурационном файле.
//* @param Значения {Соответствие} Значения, считанные из конфигурационного файла.
Процедура ПриСозданииОбъекта(ИД, Значения) Экспорт
	
	СтрокаПодключения = Значения.Получить("conn");
	
	Если СтрокаПодключения = Неопределено Тогда
		ВызватьИсключение "Не указана строка подключения к базе";
	КонецЕсли;
	
	Идентификатор = ИД;
	Пользователь = Значения.Получить("user");
	Пароль = Значения.Получить("pwd");
	ВерсияПлатформы = Значения.Получить("version");
	КлючРазрешения = Значения.Получить("key");
	ИмяКоннектора = Значения.Получить("comconnector");
	
	ПользовательХранилища = Значения.Получить("repo-user");
	ПарольХранилища = Значения.Получить("repo-pwd");
	
	Если Не ЭтоФайловаяБаза() Тогда
		ИмяСервераSQL = Значения.Получить("sql-server");
		ИмяБазыSQL = Значения.Получить("sql-base");
		
		Если Не ЗначениеЗаполнено(ИмяСервераSQL) Тогда
			ИмяСервераSQL = ПолучитьИмяСервера();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяБазыSQL) Тогда
			ИмяБазыSQL = ПолучитьИмяБазы();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		ВерсияПлатформы = "8.3";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяКоннектора) Тогда
		ВерсияКоннектора = Неопределено;
		
		Если СтрНачинаетсяС(ВерсияПлатформы, "8.3") Тогда
			ВерсияКоннектора = "83";
		ИначеЕсли СтрНачинаетсяС(ВерсияПлатформы, "8.2") Тогда
			ВерсияКоннектора = "82";
		ИначеЕсли СтрНачинаетсяС(ВерсияПлатформы, "8.1") Тогда
			ВерсияКоннектора = "81";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВерсияКоннектора) Тогда
			ИмяКоннектора = СтрШаблон("V%1.COMConnector", ВерсияКоннектора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//* @desc Возвращает объект управления конфигуратором.
//* @return {УправлениеКонфигуратором}
Функция ПолучитьКонфигуратор() Экспорт
	
	Если Конфигуратор = Неопределено Тогда
		Конфигуратор = Новый УправлениеКонфигуратором;
		
		Конфигуратор.УстановитьКонтекст(
			СтрШаблон("/IBConnectionString ""%1""", СтрокаПодключения),
			Пользователь,
			Пароль);
			
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
		
		Если ЗначениеЗаполнено(КлючРазрешения) Тогда
			Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Конфигуратор;
	
КонецФункции

Функция ПолучитьСтрокуПодключенияCOM()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СтрокаПодключения);
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		МассивПараметров.Добавить(СтрШаблон("Usr=""%1""", Пользователь));
		МассивПараметров.Добавить(СтрШаблон("Pwd=""%1""", Пароль));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлючРазрешения) Тогда
		МассивПараметров.Добавить(СтрШаблон("uc=""%1""", КлючРазрешения));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПараметров, "; ");
	
КонецФункции

//* @desc Возвращает COM-объект для работы с базой.
//* @return {COMОбъект}
Функция ПолучитьCOMСоединение() Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяКоннектора) Тогда
		ВызватьИсключение "Не удалось автоматически определить имя коннектора";
	КонецЕсли;
	
	Объект = Новый COMОбъект(ИмяКоннектора);
	Соединение = Объект.Connect(ПолучитьСтрокуПодключенияCOM());
	
	Возврат Соединение;
	
КонецФункции

//* @desc Возвращает объект внешней обработки (см. src/templates/ДействияСБазойШаблон.epf).
//* @param Соединение {COMОбъект} COM-соединение (COMConnector.Connect).
//* @param ПутьКОбработке {Строка} Путь к внешней обработке.
//* @return {COMОбъект}
Функция ПолучитьОбъектОбработкиДействий(Соединение, ПутьКОбработке) Экспорт
	
	Обработка = Соединение.ВнешниеОбработки.Создать(ПутьКОбработке, Ложь);
	Возврат Обработка;
	
КонецФункции

//* @desc Возвращает объект внешней обработки (см. src/БлокировкаСеансов.epf).
//* @param Соединение {COMОбъект} COM-соединение (COMConnector.Connect).
//* @return {COMОбъект}
Функция ПолучитьОбъектОбработкиБлокировки(Соединение) Экспорт
	
	Путь = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "БлокировкаСеансов.epf");
	Обработка = Соединение.ВнешниеОбработки.Создать(Путь, Ложь);
	Возврат Обработка;
	
КонецФункции

//* @desc Версию конфигурации из метаданных базы. Используется COM-соединение.
//* @return {Строка}
Функция ПолучитьВерсиюКонфигурации() Экспорт
	
	Соединение = ПолучитьCOMСоединение();
	Версия = Соединение.Метаданные.Версия;
	
	ОсвободитьОбъект(Соединение);
	ВыполнитьСборкуМусора();
	
	Возврат Версия;
	
КонецФункции

//* @desc Определяет по строке подключения, является ли база файловой.
//* @return {Булево}
Функция ЭтоФайловаяБаза() Экспорт
	
	Возврат СтрНачинаетсяС(ВРег(СтрокаПодключения), ВРег("File="));
	
КонецФункции

//* @desc Определяет каталог базы по строке подключения.
//* @return {Строка, Неопределено} Неопределено - если база серверная.
Функция ПолучитьПутьКБазе() Экспорт
	
	Если Не ЭтоФайловаяБаза() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараЗначений = ПараЗначенийИзСтроки(СтрокаПодключения);
	
	Возврат ПараЗначений.Значение;
	
КонецФункции

//* @desc Определяет имя сервера по строке подключения.
//* @return {Строка, Неопределено} Неопределено - если база файловая.
Функция ПолучитьИмяСервера() Экспорт
	
	Если ЭтоФайловаяБаза() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиСтроки = СтрРазделить(СтрокаПодключения, ";");
	
	Для Каждого Часть Из ЧастиСтроки Цикл
		ПараЗначений = ПараЗначенийИзСтроки(Часть);
		
		Если ВРег(ПараЗначений.Ключ) = ВРег("Srvr") Тогда
			Возврат ПараЗначений.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//* @desc Определяет имя базы на сервере по строке подключения.
//* @return {Строка, Неопределено} Неопределено - если база файловая.
Функция ПолучитьИмяБазы() Экспорт
	
	Если ЭтоФайловаяБаза() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиСтроки = СтрРазделить(СтрокаПодключения, ";");
	
	Для Каждого Часть Из ЧастиСтроки Цикл
		ПараЗначений = ПараЗначенийИзСтроки(Часть);
		
		Если ВРег(ПараЗначений.Ключ) = ВРег("Ref") Тогда
			Возврат ПараЗначений.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПараЗначенийИзСтроки(Строка)
	
	ЧастиСтроки = СтрРазделить(Строка, "=");
	
	Ключ = СокрЛП(ЧастиСтроки[0]);
	
	Значение = СокрЛП(ЧастиСтроки[1]);
	Значение = СтрЗаменить(Значение, ";", "");
	Значение = СтрЗаменить(Значение, "'", "");
	
	Возврат Новый Структура("Ключ, Значение", Ключ, Значение);
	
КонецФункции
